Readme.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/


#!/bin/bash

# Path to your JaCoCo XML report
XML_FILE="path/to/your/jacoco.xml"

# Check if the file exists
if [ ! -f "$XML_FILE" ]; then
  echo "Error: File not found: $XML_FILE"
  exit 1
fi

# Function to extract coverage data for a specific type
extract_coverage() {
  TYPE="$1"
  COVERED=$(grep -oP "<counter type=\"$TYPE\" covered=\"\K[0-9]+" "$XML_FILE")
  MISSED=$(grep -oP "<counter type=\"$TYPE\" missed=\"\K[0-9]+" "$XML_FILE")

  # Handle cases where grep might not find a match
  COVERED="${COVERED:-0}"
  MISSED="${MISSED:-0}"

  TOTAL=$((COVERED + MISSED))
  PERCENTAGE=0  # Initialize to avoid potential errors

  if [[ "$TOTAL" -gt 0 ]]; then
    PERCENTAGE=$(bc <<< "scale=2; $COVERED / $TOTAL * 100") # Floating-point calculation
  fi

  echo "$TYPE:"
  echo "  Covered: $COVERED"
  echo "  Missed: $MISSED"
  echo "  Total: $TOTAL"
  echo "  Percentage: $PERCENTAGE%"
  echo "--------------------"
}

echo "JaCoCo Coverage Report:"

# Extract coverage for multiple types
for type in instruction branch line complexity method class; do
  extract_coverage "$type"
done

# Calculate overall coverage percentages
calculate_percentage() {
  TYPE="$1"
  COVERED=$(grep -oP "<counter type=\"$TYPE\" covered=\"\K[0-9]+" "$XML_FILE")
  MISSED=$(grep -oP "<counter type=\"$TYPE\" missed=\"\K[0-9]+" "$XML_FILE")

  COVERED="${COVERED:-0}"
  MISSED="${MISSED:-0}"
  TOTAL=$((COVERED + MISSED))

  PERCENTAGE=0
  if [[ "$TOTAL" -gt 0 ]]; then
    PERCENTAGE=$(bc <<< "scale=2; $COVERED / $TOTAL * 100")
  fi

  echo "$TYPE Coverage Percentage: ${PERCENTAGE}%"
}

calculate_percentage "instruction"
calculate_percentage "branch"
calculate_percentage "line"
