Readme.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/


#!/bin/bash

# Fail on errors
set -e

# Run tests and generate JaCoCo report
./gradlew test jacocoTestReport

# Copy the CSV report for easier access
JACOCO_CSV="build/reports/jacoco/test/jacocoTestReport.csv"
cp "$JACOCO_CSV" jacoco.csv

# Extract coverage data
if [[ -f "jacoco.csv" ]]; then
    # Read CSV and compute coverage
    totalLines=0
    coveredLines=0
    totalBranches=0
    coveredBranches=0
    totalMethods=0
    coveredMethods=0

    while IFS=, read -r group package class method desc instrCovered instrTotal branchCovered branchTotal methodCovered methodTotal _; do
        if [[ "$instrTotal" =~ ^[0-9]+$ ]]; then
            (( coveredLines += instrCovered ))
            (( totalLines += instrTotal ))
        fi
        if [[ "$branchTotal" =~ ^[0-9]+$ ]]; then
            (( coveredBranches += branchCovered ))
            (( totalBranches += branchTotal ))
        fi
        if [[ "$methodTotal" =~ ^[0-9]+$ ]]; then
            (( coveredMethods += methodCovered ))
            (( totalMethods += methodTotal ))
        fi
    done < <(tail -n +2 jacoco.csv) # Skip header

    # Calculate coverage percentages
    lineCoverage=$(awk "BEGIN {printf \"%.2f\", ($coveredLines / $totalLines) * 100}")
    branchCoverage=$(awk "BEGIN {printf \"%.2f\", ($coveredBranches / $totalBranches) * 100}")
    methodCoverage=$(awk "BEGIN {printf \"%.2f\", ($coveredMethods / $totalMethods) * 100}")

    # Output results
    echo "📊 JaCoCo Test Coverage Report"
    echo "--------------------------------"
    echo "🔹 Line Coverage:   $lineCoverage%"
    echo "🔹 Branch Coverage: $branchCoverage%"
    echo "🔹 Method Coverage: $methodCoverage%"

    # Set GitHub Actions outputs
    echo "lineCoverage=$lineCoverage" >> $GITHUB_ENV
    echo "branchCoverage=$branchCoverage" >> $GITHUB_ENV
    echo "methodCoverage=$methodCoverage" >> $GITHUB_ENV
else
    echo "❌ JaCoCo CSV report not found!"
    exit 1
fi










const fs = require("fs");
const path = require("path");

/**
 * Reads the JaCoCo CSV file and extracts the coverage percentage.
 * @param {string} filePath - Path to the JaCoCo CSV file.
 * @returns {object} - Extracted coverage data.
 */
function extractCoverage(filePath) {
    try {
        const data = fs.readFileSync(filePath, "utf-8");
        const lines = data.split("\n").slice(1); // Skip the header row

        let totalInstructions = 0;
        let coveredInstructions = 0;

        lines.forEach((line) => {
            const columns = line.split(",");

            if (columns.length >= 4) {
                const missed = parseInt(columns[3], 10) || 0;
                const covered = parseInt(columns[4], 10) || 0;
                
                totalInstructions += missed + covered;
                coveredInstructions += covered;
            }
        });

        const coverage = totalInstructions
            ? ((coveredInstructions / totalInstructions) * 100).toFixed(2)
            : "0.00";

        return { coverage: `${coverage}%` };
    } catch (error) {
        console.error("Error reading JaCoCo CSV file:", error);
        return { coverage: "Error" };
    }
}

/**
 * GitHub Actions script module.
 */
module.exports = ({ github, context }) => {
    const coverageData = extractCoverage("./path/to/jacoco.csv"); // Adjust path
    return coverageData.coverage;
};





