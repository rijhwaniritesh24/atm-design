Readme.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/


const fs = require('fs');
const core = require('@actions/core');

function parseJacocoCSV(filePath) {
    const data = fs.readFileSync(filePath, 'utf8');
    const lines = data.split('\n').slice(1); // Skip the header line

    let totalLines = 0, coveredLines = 0;
    let totalBranches = 0, coveredBranches = 0;
    let totalMethods = 0, coveredMethods = 0;

    for (const line of lines) {
        if (!line.trim()) continue;
        const columns = line.split(',');

        // Adjust column indexes based on JaCoCo CSV format
        const coveredInstr = parseInt(columns[3], 10);
        const totalInstr = parseInt(columns[4], 10);
        const coveredBr = parseInt(columns[5], 10);
        const totalBr = parseInt(columns[6], 10);
        const coveredMth = parseInt(columns[7], 10);
        const totalMth = parseInt(columns[8], 10);

        coveredLines += coveredInstr;
        totalLines += totalInstr;
        coveredBranches += coveredBr;
        totalBranches += totalBr;
        coveredMethods += coveredMth;
        totalMethods += totalMth;
    }

    const lineCoverage = totalLines ? ((coveredLines / totalLines) * 100).toFixed(2) : 'N/A';
    const branchCoverage = totalBranches ? ((coveredBranches / totalBranches) * 100).toFixed(2) : 'N/A';
    const methodCoverage = totalMethods ? ((coveredMethods / totalMethods) * 100).toFixed(2) : 'N/A';

    return { lineCoverage, branchCoverage, methodCoverage };
}

async function run() {
    try {
        const jacocoReportPath = 'jacoco.csv'; // Set the path to your JaCoCo CSV file
        const coverage = parseJacocoCSV(jacocoReportPath);

        const message = `
### ðŸ“Š JaCoCo Test Coverage Report
- **Line Coverage:** ${coverage.lineCoverage}%
- **Branch Coverage:** ${coverage.branchCoverage}%
- **Method Coverage:** ${coverage.methodCoverage}%
`;

        console.log(message);

        // Post a comment on the PR (if available)
        if (github.context.payload.pull_request) {
            const prNumber = github.context.payload.pull_request.number;
            await github.rest.issues.createComment({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                issue_number: prNumber,
                body: message,
            });
        }

        // Set outputs for GitHub Actions
        core.setOutput("lineCoverage", coverage.lineCoverage);
        core.setOutput("branchCoverage", coverage.branchCoverage);
        core.setOutput("methodCoverage", coverage.methodCoverage);
    } catch (error) {
        core.setFailed(`Error: ${error.message}`);
    }
}

run();




name: Analyze Coverage
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./script.js');
            script();

